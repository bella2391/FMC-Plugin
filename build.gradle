plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    implementation 'com.mojang:brigadier:1.0.18'
    
    // Guice dependencies
    implementation 'com.google.inject:guice:5.1.0'
    // Dependencies of Guice
    implementation 'javax.inject:javax.inject:1'
    implementation 'aopalliance:aopalliance:1.0'
    implementation 'biz.aQute:bnd:0.0.384'
    implementation 'com.google.errorprone:error_prone_annotations:2.18.0'
    //implementation 'com.google.guava:guava:31.0.1-jre' // already implemented by minecraft's dependancies
    implementation 'com.google.truth.extensions:truth-java8-extension:1.1.3'
    implementation 'com.google.truth:truth:1.1.3'
    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
    implementation 'jakarta.inject:jakarta.inject-tck:2.0.1'
    implementation 'junit:junit:4.13.2'
    
    // Other dependencies
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'mysql:mysql-connector-java:8.0.30'
    implementation 'org.json:json:20180813'
    // LuckPerm
    implementation "net.luckperms:api:5.4"
}

shadowJar {
    archiveClassifier.set('all')
    //configurations = [project.configurations.runtimeClasspath]
    configurations = [project.configurations.runtimeClasspath, project.configurations.compileClasspath]
    
    // 依存関係のフィルタリング
    dependencies {
        // Guice dependencies
        include(dependency('com.google.inject:guice'))
        // Dependencies of Guice
        include(dependency('javax.inject:javax.inject'))
        include(dependency('aopalliance:aopalliance'))
        include(dependency('biz.aQute:bnd'))
        include(dependency('com.google.errorprone:error_prone_annotations'))
        //include(dependency('com.google.guava:guava'))
        include(dependency('com.google.truth.extensions:truth-java8-extension'))
        include(dependency('com.google.truth:truth'))
        include(dependency('jakarta.inject:jakarta.inject-api'))
        include(dependency('jakarta.inject:jakarta.inject-tck'))
        include(dependency('junit:junit'))
        // Other dependencies
        include(dependency('mysql:mysql-connector-java'))
        include(dependency('org.json:json'))
        include(dependency('org.yaml:snakeyaml'))
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Reobfuscate the shadow jar
reobf {
    shadowJar {
        // Reobfuscate the shadowed jar
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
    //finalizedBy tasks.named('shadowJar')
    //finalizedBy tasks.named('reobfShadowJar')
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
            url "https://libraries.minecraft.net"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
